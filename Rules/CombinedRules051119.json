[
    {
            "name": "Blower flag",
            "doc": "Set the flag and increment counter blower is used..",
            "verb": "adjusted",
            "object": "control",
            "context": "BlowerLevels",
            "ruleType": "Status",
            "priority": 5, 
            "conditions": {
                "event.data.gemeObjectType":"blower",
                "event.data.oldValue":{"?ne":"event.data.newValue"}
            },
            "predicate": {
                "!set":{"state.flags.blowerUsed":true},
                "!incr":{"state.observables.blowerManip":1}
            }
        },
        
        {
            "name": "Reset Blower Flags and Counters",
            "doc": "Set flags to false and Counters to 0",
            "verb": "play",
            "object": "params",
            "context": "Manipulation",
            "ruleType": "Reset",
            "priority": 10,       
            "conditions": {
            },
            "predicate": {
                "!set":{"state.flags.blowerUsed":false,
                        "state.observables.blowerManip":0}
            }
        },
        
    {
        "name": "Bounciness Off",
        "doc": "When player unchecks bounciness, clear flag.",
        "verb": "adjusted",
        "object": "control",
        "context": "Manipulation",
        "ruleType": "Status",
        "priority": 2,
        "conditions": {
            "event.data.gemeObjectType": "Bounciness",
            "event.data.newValue": 0
        },
        "predicate": {
            "!set":{"state.flags.BouncinessOn":false}
        }
    },
    {
        "name": "Bounciness On",
        "doc":"",
        "initial": "When player checks bounciness, set flag.",
        "verb": "adjusted",
        "object": "control",
        "context": "Manipulation",
        "ruleType": "Status",
        "priority": 2,
        "conditions": {
            "event.data.gemeObjectType": "Bounciness",
            "event.data.newValue": 0.8
        },
        "predicate": {
            "!set":{"state.flags.BouncinessOn":true}
        }
    },
    {
        "name": "Bouncy Run Check.",
        "doc": "Set the bounciness observable if bounciness flag is set.",
        "verb": "play",
        "object": "params",
        "context": "Manipulation",
        "ruleType": "Observable",
        "priority": 5,
        "conditions": {
            "state.flags.BouncinessOn":true
        },
        "predicate": {
            "!set":{
                "state.observables.Bounciness":true
            }
        }
    },
    {
        "name": "Reset Agents",
        "doc": "Reset the agentlist",
        "verb": "initialized",
        "object": "game level",
        "context": "ALL",
        "ruleType": "Reset",
        "priority": 2,
        "conditions": {
        },
        "predicate": {
            "!set":{ "state.observables.agentsUsed":[]},
            "!unset": {"state.observables.Agent":"NA"}
        }
    },
    {
      "name": "Update agent used.",
      "doc": "Adds the agent to the agent list, and sets the last agent.",
      "verb": "identified",
      "object": "game object",
      "context": "Sketching",
      "ruleType": "Observable",
      "priority": 5,
      "conditions": {
        "event.data.gemeObjectType":["Ramp","Lever","Springboard","Pendulum"]
      },
      "predicate": {
        "!push":{"state.observables.agentsUsed":
            "event.data.gemeObjectType"},
        "!set": {"state.observables.Agent":
            "event.data.gemeObjectType"}
      }
    },
    
    {
      "name": "Coin rule",
      "doc": "Set the value of the badge to the coin the player earned.",
      "verb": "satisfied",
      "object": "achievement",
      "context": "ALL",
      "ruleType": "Observable", 
      "priority": 5,
      "conditions": {
          "event.data.badge":["silver","gold","none"]
      },
      "predicate": {
        "!set":{"state.observables.TrophyLevel":"event.data.badge"}
      }
    },
    {
            "name": "Attempt Counter",
            "doc": "Increments the attempt counter when game starts, restarts.",
            "verb": "initialized",
            "object": "game level",
            "context": "ALL",
            "ruleType": "Status",
            "priority": 2,
            "conditions": {
                "state.context": {"?eq":"event.data.gameLevelId"}
            },
            "predicate": {
                "!incr": {"state.observables.NumberAttempts":1}
            }
        },
        
        {
            "name": "New Level Started",
            "doc": "Indicates that we should change level",
            "verb": "initialized",
            "object": "game level",
            "context": "ALL",
            "ruleType": "Context",
            "priority": 1,
            "conditions": {
                "state.context": {"?ne":"event.data.gameLevelId"}
            },
            "predicate": {
                "!set": {"state.context":"event.data.gameLevelId"}
            }
        },
        
        {
            "name": "Click Puffer",
            "doc": "Increments the click counter",
            "verb": "adjusted",
            "object": "control",
            "context": "Manipulation",
            "ruleType": "Status",
            "priority": 2,
            "conditions": {
                "event.data.gemeObjectType": "Puffer" 
            },
            "predicate": {
                "!set":{"state.flags.PufferUsed": true},
                "!incr":{"state.observables.PufferClicks": 1}
            }
        },
    {
        "name": "Count for Puffer",
        "doc": "Set the value of position for the Puffer",
        "verb": "adjusted",
        "object": "control",
        "context": "Manipulation",
        "ruleType": "Status",
        "priority": 5,
        "conditions": {
            "event.data.gemeObjectType":"Puffer"
        },
        "predicate": {
            "!set":{
                "state.flags.PufferUsed":true,
                "state.flags.PufferPositionVal":"event.data.position"
            }
        }
    },
    {
        "name": "Mass Slider flag",
        "doc": "Set the flag and increment counter if mass slider is used..",
        "verb": "adjusted",
        "object": "control",
        "context": "Manipulation",
        "ruleType": "Status",
        "priority": 5, 
        "conditions": {
            "event.data.gemeObjectType":"MassValueManipulator",
            "event.data.oldValue":{"?ne":"event.data.newValue"}
        },
        "predicate": {
            "!set":{"state.flags.massUsed":true},
            "!incr":{"state.observables.Mass":1}
        }
    },
    {
        "name": "Air Slider flag",
        "doc": "Set the flag and increment counter if air slider is used..",
        "verb": "adjusted",
        "object": "control",
        "context": "Manipulation",
        "ruleType": "Status",
        "priority": 5, 
        "conditions": {
            "event.data.gemeObjectType":"AirResistanceValueManipulator",
            "event.data.oldValue":{"?ne":"event.data.newValue"}
        },
        "predicate": {
            "!set":{"state.flags.airUsed":true},
            "!incr":{"state.observables.AirResistence":1}
        }
    },
    {
        "name": "Gravity Slider flag",
        "doc": "Set the flag and increment counter if gravity slider is used..",
        "verb": "adjusted",
        "object": "control",
        "context": "Manipulation",
        "ruleType": "Status",
        "priority": 5, 
        "conditions": {
            "event.data.gemeObjectType":"GravityValueManipulator",
            "event.data.oldValue":{"?ne":"event.data.newValue"}
        },
        "predicate": {
            "!set":{"state.flags.gravityUsed":true},
            "!incr":{"state.observables.Gravity":1}
        }
    },
    {
        "name": "Reset Manipulation Flags and Counters",
        "doc": "Set flags to false and Counters to 0",
        "verb": "play",
        "object": "params",
        "context": "Manipulation",
        "ruleType": "Reset",
        "priority": 10,       
        "conditions": {
            "event.data.gemeObjectType":["AirResistanceValueManipulator","MassValueManipulator","GravityValueManipulator"]
        },
        "predicate": {
            "!set":{"state.flags.massUsed":false,
                    "state.flags.airUsed":false,
                    "state.flags.gravityUsed":false,
                    "state.observables.Gravity":0,
                    "state.observables.AirResistence":0,
                    "state.observables.Mass":0}
        }
    },
    {
        "name": "Pause on Suspend",
        "doc": "When Level is paused, pause the timer",
        "verb": "suspended",
        "object": "game level",
        "context": "ALL",
        "ruleType": "Status",
        "priority": 2,
        "conditions": {
        },
        "predicate": {
            "!set":{"state.timers.levelTime.running":false}
        }
    },
    {
        "name": "Resume on Resume",
        "doc": "When Level is paused, pause the timer",
        "verb": "resumed",
        "object": "game level",
        "context": "ALL",
        "ruleType": "Status",
        "priority": 2,
        "conditions": {
        },
        "predicate": {
            "!set":{"state.timers.levelTime.running":true}
        }
    },
    {
        "name": "Set time on level exit.",
        "doc": "When Level is exited, set total time.",
        "verb": "exited",
        "object": "game level",
        "context": "ALL",
        "ruleType": "Status",
        "priority": 2,
        "conditions": {
        },
        "predicate": {
            "!set":{"state.timers.levelTime.running":false,
                    "state.observables.Duration":"state.timers.levelTime"}
        }
    },
    {
        "name": "Set time on level completion",
        "doc": "When Level is passed, set total time.",
        "verb": "passed",
        "object": "game level",
        "context": "ALL",
        "ruleType": "Status",
        "priority": 2,
        "conditions": {
        },
        "predicate": {
            "!set":{"state.timers.levelTime.running":false,
                    "state.observables.Duration":"state.timers.levelTime"}
        }
    },
    {
        "name": "New Level Trigger",
        "doc": "When a new level starts, send the observables.",
        "verb": "initialized",
        "object": "game level",
        "context": "ALL",
        "ruleType": "Trigger", 
        "priority": 2,
        "conditions": {
            "state.context":{"?ne":"state.oldContext"},
            "state.oldContext":{"?ne":"*INITIAL*"}
        },
        "predicate": {
            "!send":{
                "mess":"New Observables",
                "context":"state.oldContext",
                "data":{}
            }
        }
    },
    {
        "name": "Grand Reset",
        "doc": "When new level, clear observables",
        "verb": "initialized",
        "object": "game level",
        "context": "ALL",
        "ruleType": "Reset",
        "priority": 2,
        "conditions": {
            "state.context":{"?ne":"state.oldContext"}
        },
        "predicate": {
            "!set":{"state.timers.levelTime.time":{"secs":0},
                    "state.observables.blowerManip":0,
                    "state.observables.Bounciness":false,
                    "state.observables.NumberAttempts":1,
                    "state.flags.PufferUsed": false,
                    "state.observables.NumberPufferManip": 0},
            "!unset":{"state.observables.TrophyLevel":"Delete"}
        }
    },
    {
        "name": "Start Timer",
        "doc": "When Level Starts, Start the timer",
        "verb": "initialized",
        "object": "game level",
        "context": "ALL",
        "ruleType": "Reset",
        "priority": 10,
        "conditions": {
        },
        "predicate": {
            "!start":"state.timers.levelTime"
        }
    }
]

