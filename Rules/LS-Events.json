[{
        "name": "Reset Learning Support Timer",
        "doc": "At the start of the level, reset learning support timer.",
        "verb": "initialized",
        "object": "game level",
        "context": "ALL",
        "ruleType": "Reset",
        "priority": 4,
        "conditions": {
            "state.context": { "?ne": "state.oldContext" }
        },
        "predicate": {
            "!reset": "state.timers.LS_duration"
        }
    },
    {
        "name": "Learning Support Clicked and Timer Started",
        "doc": "Every time any LS is clicked record the LS Type and Start the Timer",
        "verb": "initialized",
        "object": "learning support",
        "context": "ALL",
        "ruleType": "Status",
        "priority": 4,
        "conditions": {
            "event.data.learningSupportType": { "?ne": "helpBClicked" }
        },
        "predicate": {
            "!set": { "state.flags.learningSupportType": "event.data.learningSupportType" },
            "!start": "state.timers.LS_duration"
        }
    },
    {
        "name": "Learning Support Event Started with money and Timer Started",
        "doc": "Race condition in logging causes LS event to start with moneyEarned.",
        "verb": "moneyEarned",
        "object": "ANY",
        "context": "ALL",
        "ruleType": "Status",
        "priority": 4,
        "conditions": {
            "event.object": { "?in": ["formula", "glossary", "definition"] }
        },
        "predicate": {
            "!set": { "state.flags.learningSupportType": "event.object" },
            "!start": "state.timers.LS_duration"
        }
    },
    {
        "name": "Learning Support Stop Time",
        "doc": "Every time the LS is closed stop the timer",
        "verb": "exited",
        "object": "learning support",
        "context": "ALL",
        "ruleType": "Status",
        "priority": 4,
        "conditions": {},
        "predicate": {
            "!set": { "state.timers.LS_duration.running": false }
        }
    },
    {
        "name": "Learning Support Record Time",
        "doc": "Every time the LS is closed stop the timer",
        "verb": "exited",
        "object": "learning support",
        "context": "ALL",
        "ruleType": "Observable",
        "priority": 4,
        "conditions": {
            "event.data.learningSupportType": { "?ne": "allLearningSupports" }
        },
        "predicate": {
            "!set": {
                "state.observables.LS_duration": "state.timers.LS_duration",
                "state.observables.learningSupportType": "event.data.learningSupportType"
            }
        }
    },
    {
        "name": "LS Trigger",
        "doc": "When learning support completed, update learning support data.",
        "verb": "exited",
        "object": "learning support",
        "context": "ALL",
        "ruleType": "Trigger",
        "priority": 2,
        "conditions": {
            "event.data.learningSupportType": { "?ne": "allLearningSupports" }
        },
        "predicate": {
            "!send": {
                "mess": "LS Watched",
                "context": "state.oldContext",
                "data": {
                    "money": "state.flags.moneyEarned",
                    "onWhat": "state.observables.learningSupportType",
                    "LS_duration": "state.observables.LS_duration",
                    "learningSupportType": "state.observables.learningSupportType"
                }
            }
        }
    }
]